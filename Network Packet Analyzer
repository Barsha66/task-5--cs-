from scapy.all import sniff
from scapy.layers.inet import IP, TCP, UDP, ICMP

def packet_callback(packet):
    # Display IP layer information if present
    if IP in packet:
        ip_layer = packet[IP]
        src_ip = ip_layer.src
        dst_ip = ip_layer.dst
        protocol = ip_layer.proto

        print(f"Source IP: {src_ip} -> Destination IP: {dst_ip} | Protocol: {protocol}")

        # Display TCP/UDP specific information
        if TCP in packet:
            tcp_layer = packet[TCP]
            print(f"TCP | Source Port: {tcp_layer.sport} -> Destination Port: {tcp_layer.dport}")
        
        elif UDP in packet:
            udp_layer = packet[UDP]
            print(f"UDP | Source Port: {udp_layer.sport} -> Destination Port: {udp_layer.dport}")

        # ICMP packets
        elif ICMP in packet:
            print("ICMP Packet Detected")

        # Display payload if available
        payload = bytes(packet[IP].payload)
        print(f"Payload: {payload[:20]}...")  # Displaying first 20 bytes for readability

    print("-" * 50)  # Separator for each packet

# Start sniffing on the specified network interface
print("Starting packet sniffer...")
sniff(prn=packet_callback, filter="ip", store=False)

